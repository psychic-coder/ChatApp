import {configureStore,combineReducers} from "@reduxjs/toolkit";
import authSlice from "./reducers/auth"
import api from "./api/api";
import miscSlice from "./reducers/misc";
import chatSlice from "./reducers/chat";

 const store=configureStore({
    reducer:{
    [authSlice.name]:authSlice.reducer,
    [miscSlice.name]:miscSlice.reducer,
    [chatSlice.name]:chatSlice.reducer,
    [api.reducerPath]:api.reducer
    },
    middleware:(defaulMiddleware)=>[...defaulMiddleware(),api.middleware],
})
export default store;

/*By including api.reducerPath and api.reducer in your store configuration, you are integrating RTK Query into your Redux store to manage API-related state alongside your other Redux state slices. This allows you to easily manage API requests, cache, and related state within your Redux store using RTK Query's built-in functionality.*/
/*the middleware array passed to configureStore includes the default middleware and RTK Query's middleware (api.middleware). This middleware is responsible for intercepting and handling API requests and responses*/
/*api seems to be an instance of RTK Query's createApi function, which creates a slice for managing API requests and responses.
api.reducerPath is a property provided by RTK Query that represents the slice name for the API cache. This slice manages cached data and metadata for API requests and responses.
api.reducer is the reducer generated by RTK Query for managing API state.
*/